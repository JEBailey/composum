var $jscomp={scope:{},findInternal:function(a,c,b){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(c.call(b,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)};
$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(a,c,b,d){if(c){b=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in b||(b[e]={});b=b[e]}a=a[a.length-1];d=b[a];c=c(d);c!=d&&null!=c&&$jscomp.defineProperty(b,a,{configurable:!0,writable:!0,value:c})}};
$jscomp.polyfill("Array.prototype.find",function(a){return a?a:function(a,b){return $jscomp.findInternal(this,a,b).v}},"es6-impl","es3");
(function(a){a.browser=a.browser||{};(function(c){c.AccessPolicyEntryDialog=a.components.Dialog.extend({initialize:function(b){a.components.Dialog.prototype.initialize.apply(this,[b]);this.form=a.getWidget(this.el,"form.widget-form",a.components.FormWidget);this.rule=a.getWidget(this.el,".rule .radio-group-widget",a.components.RadioGroupWidget);this.$principal=this.$('input[name="principal"]');this.$privilege=this.$('select[name="privilege"]');this.$restriction=this.$('select[name="restrictionKey"]');
this.$("button.save").click(_.bind(this.saveACL,this));this.privilegeCombobox=a.getWidget(this.el,this.$privilege,a.components.SelectWidget);this.restrictionCombobox=a.getWidget(this.el,this.$restriction,a.components.SelectWidget);this.$principal.attr("autocomplete","off");this.$principal.typeahead({minLength:1,source:function(b,c){a.getJson("/bin/cpm/nodes/security.principals.json/"+b,function(a){c(a)})}});this.$el.on("shown.bs.modal",_.bind(function(){this.rule.setValue("allow");this.loadSupportedPrivileges();
this.loadRestrictionNames();this.$principal.focus()},this))},reset:function(){a.components.Dialog.prototype.reset.apply(this)},loadSupportedPrivileges:function(){this.privilegeCombobox.$el.html("");a.getJson("/bin/cpm/nodes/security.supportedPrivileges.json"+c.getCurrentPath(),_.bind(function(a){for(var b=0;b<a.length;b++)this.$privilege.append('<option value="'+a[b]+'">'+a[b]+"</option>")},this))},loadRestrictionNames:function(){this.restrictionCombobox.$el.html("");this.$restriction.append('<option value=""></option>');
a.getJson("/bin/cpm/nodes/security.restrictionNames.json"+c.getCurrentPath(),_.bind(function(a){for(var b=0;b<a.length;b++)this.$restriction.append('<option value="'+a[b]+'">'+a[b]+"</option>")},this));this.$restriction[0].selectedIndex=-1},saveACL:function(){var b=c.getCurrentPath(),d=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=$(a[c]).val();return b}($('select[name="privilege"]')),e=function(a){for(var b=[],c=0;c<a.length;c++){var d=$(a[c]).val();if(""!=d){var e=$(a[c]).parent().find('input[name="restrictionValue"]').val();
b[c]=d+"="+e}}return b}($('select[name="restrictionKey"]'));a.ajaxPut("/bin/cpm/nodes/security.accessPolicy.json"+b,JSON.stringify({principal:$(".form-control[name='principal']")[0].value,allow:$(".form-control>div.allow input")[0].checked,privileges:d,restrictions:e,path:b}),{dataType:"json"},_.bind(function(a){this.hide()},this),_.bind(function(b){a.alert("danger","Error","Error on adding access policy entries",b)},this))}});c.openAccessPolicyEntryDialog=function(b){a.getView("#access-policy-entry-dialog",
c.AccessPolicyEntryDialog).show(void 0,b)}})(a.browser)})(window.core);
